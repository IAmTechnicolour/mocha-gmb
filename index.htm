<html>
	<head>

		<script type="application/javascript" src="gmb_mnemonic.js"></script>
		<script type="application/javascript" src="gmb_memory.js"></script>
		<script type="application/javascript" src="gmb_cpu.js"></script>
		<script type="application/javascript" src="gmb_opcode_functions.js"></script>
		<script type="application/javascript" src="gmb_opcodes.js"></script>
		<script type="application/javascript" src="gmb_cb_opcodes.js"></script>
		<script type="application/javascript" src="gmb_interupts.js"></script>
		<script type="application/javascript" src="gmb_gpu.js"></script>
		<script type="application/javascript" src="gmb_lcd.js"></script>
		<script type="application/javascript" src="gmb_timers.js"></script>

		<style>
			table
			{
				border-collapse:collapse;
				font-family: "Courier New", monospace;
			}
			table,th, td
			{
				border: 1px solid black;
			}

			td
			{
				width: 100px;
				text-align: center;
			}

		</style>




	</head>
	<body>

		<canvas id="canvas1" width="256" height="256"></canvas>
		<canvas id="canvas2" width="256" height="256"></canvas>
		<canvas id="canvas3" width="256" height="256"></canvas>
		<canvas id="canvas4" width="256" height="256"></canvas>

		<br><br>
		<input type="file" id="file" name="file"/><br>
		<output id="list"></output><br>

		<button type="button" onclick="debug()">Execute</button>
		<button type="button" onclick="run = setInterval(executionLoop,16.6);">Run</button>
		<button type="button" onclick="clearInterval(run)">Stop</button>

		<table id = "tab">
			<thead>
				<tr>
					<td>Opcode</td><td>Mnemonic</td><td>PC</td><td>SP</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>H</td><td>L</td><td>F</td>
				</tr>
			</thead>
			<tbody>
			</tbody>
		</table>

		<br><br><br>

		<table id = "tab2">
		</table>


		<script type="text/javascript">

			window.onerror=function(msg, url, linenumber){
				var Opcode = Read(PC);
				alert('Error message: '+msg+'\nURL: '+url+'\nLine Number: '+linenumber+'\nOp: '+Opcode+'\nPC: '+PC);
				return true
			}






			function pad(num, size) {
			    var s = num+"";
			    while (s.length < size) s = "0" + s;
			    return s;
			}



			/*
			var OpCount = [];

			for (var i=0xFF;i >= 0;i--) {
				var table = document.getElementById("tab2");
				var row = table.insertRow(0);
				var cell = row.insertCell(0);
				cell.innerHTML = Mnemonic_map[i];
				var cell = row.insertCell(1);
				cell.innerHTML = 0;

				OpCount[i] = 0;
			}
			*/



			function debug() {

				var Opcode = Read(PC);
				Operators[Opcode]();
				var Mnemonic = Mnemonic_map[Opcode];

				/*
				OpCount[Opcode]++;

				var x=document.getElementById('tab2').rows;
    			var y=x[Opcode].cells;
    			y[1].innerHTML=OpCount[Opcode];
    			*/


				if (Opcode == 0xCB) {Mnemonic = Mnemonic_map_cb[Read(PC+1)]}

				var InsertIntoDebug = [
					pad(Opcode.toString(16).toUpperCase(), 2),
					Mnemonic, 
					PC, 
					SP, 
					A, 
					B, 
					C, 
					D, 
					E, 
					H, 
					L, 
					pad((F>>4).toString(2),4)
				];

				var table = document.getElementById("tab");
				var row = table.insertRow(1);


				for (var i=0;i<InsertIntoDebug.length;i++) {
					var cell = row.insertCell(i);
					cell.innerHTML = InsertIntoDebug[i];
				}

				if (table.rows.length > 20) {
					table.deleteRow(table.rows.length - 1)
				}


			}




		</script>




		<script type = "application/javascript">

			var reader = new FileReader();

			reader.onload = function(evt) {
				var ROMStr = reader.result;
				//var ROMStr = ROMStr.replace(/[^a-zA-Z0-9]/g, "")
				//alert(ROMStr);

				ROM = [];


				for (var i = 0; i < ROMStr.length; i++) {
				    ROM[i] = ROMStr.charCodeAt(i);
				}	

				alert('ROM size: ' + ROM.length +
				' bytes\nROM type: ' + mbc_type[ROM[0x0147]] + 
				"\nROM banks: " + mbc_rom_size[ROM[0x0148]] + 
				"\nRAM banks: " + mbc_ram_size[ROM[0x0149]]);

				
			}

			function handleFileSelect(evt) {
				var file = evt.target.files[0];
				document.getElementById('list').innerHTML = 
				'<strong>' + escape(file.name) + '</strong> (' + (file.type || 'n/a') + ') - ' + file.size + ' bytes';

				reader.readAsBinaryString(file)

			}

			document.getElementById('file').addEventListener('change', handleFileSelect, false);
			
		</script>



	</body>
</html>
